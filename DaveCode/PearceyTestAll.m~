%test a Pearchey integral with polynomial phase, for Dave
     
clc; %clear screen
clear classes; %clear all variables

Npts=15; %number of quadrature points per SD path
X=[-8 -6 -4 -2 2 4 6 8]; Y=[2 4 6 8]; %}
a=-1; b=1; %directions of valleys
order=4;
freq=1;
mkdir('PearceyImages')

xCount=0;
yCount=0;
for x=X
    xCount=xCount+1;
    for y=Y
        yCount=yCount+1;
        polyCoeffs = [1 0 x y 0]; %a_1*x^N + ... a_N*x + a_{N+1}, if a:=polyCoeffs
        %% ----------------------------------------------------------------------------------------- %%
        %make the polynomial
        order = length(polyCoeffs)-1;
        %first derivative
        D1polyCoeffs = polyCoeffs(1:order).*fliplr(1:order);
        %second derivative
        D2polyCoeffs = D1polyCoeffs(1:(order-1)).*fliplr(1:(order-1));
        %third derivative
        D3polyCoeffs = D2polyCoeffs(1:(order-1)).*fliplr(1:(order-1));

        G = {@(x) polyval(polyCoeffs,x),@(x) polyval(D1polyCoeffs,x),@(x) polyval(D2polyCoeffs,x), @(x) polyval(D3polyCoeffs,x)};

        %% ----------------------------------------------------------------------------------------- %%

        %this radius could be considered artificial infinity, outside of which all SD
        %paths won't deviate much from a straight line
        R = monomialSettleRadius(polyCoeffs)+rand;
        fprintf('\nSettled radius = %.1f\n',R);

        [ X, W ] = NSD45( a, b, freq, Npts, G, 'analytic', true, 'visuals on', ...
                            'settleRad', R, 'ainf', 'binf');
        title(sprintf('x=%d, y=%d', x, y));
        %imPathName=sprintf('PearceyImages\\x%dy%d',x,y);
        imPathNamJHPG=sprintf('PearceyImages\\x%dy%d.jpg',x,y);
        savefig(imPathName);
        saveas(gcf,imPathNamJHPG)
        close;
                 %second row are all options for infinite endpoints
        % tic;
        % NSD45( a, b, freq, Npts, G, 'analytic', true, ...
        %                     'settleRad', R, 'ainf', 'binf');
        % T=toc;
        % fprintf('\nTook %f seconds',T);

        I_GHH=sum(W); %Gibbs-Hewett-Huybrechs estimate
        I_CHK=KirkPearceyData(x,y); %Conor-Hobbs-Kirk estimate
        err(xCount,yCount)=abs(I_CHK-I_GHH)/abs(I_CHK);
        %fprintf('\nRelative error (against 6dp of Pearcey data) %e',abs(I_CHK-I_GHH)/abs(I_CHK));
    end
end

imagesc(X,Y,err)